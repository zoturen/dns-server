// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Portare.Data.DAL;

#nullable disable

namespace Portare.Data.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240207153345_initial migration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Portare.Data.Entities.RecordEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RecordSetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RecordSetId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Portare.Data.Entities.RecordSetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Class")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Ttl")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ZoneName");

                    b.ToTable("RecordSets");
                });

            modelBuilder.Entity("Portare.Data.Entities.ZoneEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Name");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Portare.Data.Entities.RecordEntity", b =>
                {
                    b.HasOne("Portare.Data.Entities.RecordSetEntity", "RecordSet")
                        .WithMany("Records")
                        .HasForeignKey("RecordSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecordSet");
                });

            modelBuilder.Entity("Portare.Data.Entities.RecordSetEntity", b =>
                {
                    b.HasOne("Portare.Data.Entities.ZoneEntity", "Zone")
                        .WithMany("RecordSets")
                        .HasForeignKey("ZoneName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Portare.Data.Entities.RecordSetEntity", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("Portare.Data.Entities.ZoneEntity", b =>
                {
                    b.Navigation("RecordSets");
                });
#pragma warning restore 612, 618
        }
    }
}
